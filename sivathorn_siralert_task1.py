# -*- coding: utf-8 -*-
"""sivathorn_siralert_task1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WznbmfpZk8SYFoEB8gEfngCjkr9pshp2

# individual assignment 1task 1

sivathorn siralert
"""

import pandas as pd
import numpy as np

#creating the pandas dataframe

# colHeader = ["CustomerID" , "Age" , "Gender" ,
#             "Tenure" , "Usage Frequency" , "Support Calls" ,
#             "Payment Delay" , "Subscription Type" , "Contract Length" ,
#             "Total Spend" , "Last Interaction" , "Churn"]

testingData = pd.read_csv("customer_churn_dataset-testing-master.csv")
print("Number of samples: %d" %len(testingData))
trainingData = pd.read_csv("customer_churn_dataset-training-master.csv")
print("Number of samples: %d" %len(trainingData))
finalData = pd.concat([testingData , trainingData] , ignore_index = True)
finalData.sort_values(by=["CustomerID"])


#ask if order of concat matters, and what to do for duplicate cust id

#dealing with missing values

finalData.dropna()

"""# step 3

"""

mean = finalData["Last Interaction"].mean()
print(mean)
std = finalData["Last Interaction"].std()
print(std)
finalData["Last Interaction Normalized"] = (finalData["Last Interaction"] - mean) / std

mean_normalized = finalData["Last Interaction Normalized"].mean()
variance_normalized = finalData["Last Interaction Normalized"].var()

print("Mean of normalized values:", mean_normalized)
print("Variance of normalized values:", variance_normalized)

"""# step 4"""

finalData['Total Spend'].head()

finalData['Binned Total Spend'] = pd.qcut(finalData['Total Spend'] , 5 , labels = range(1,6))
finalData['Binned Total Spend'].head()

finalData['Binned Total Spend'].value_counts()

"""# step 5"""

finalData['Contract Length'].unique()

# dummy = pd.get_dummies(finalData , prefix = 'CL' , columns = ['Contract Length'])
dummy = pd.get_dummies(finalData['Contract Length'])
dummy.head()

newData = finalData.join(dummy)
newData.head

newData = newData.drop(columns = 'Contract Length')
newData

"""# step 6"""

print('age range:',newData.Age.min() , '-' , newData.Age.max())

newData['Age Status'] = pd.cut(newData['Age'], [0, 18, 35, 55, 999], labels=['underage' , 'young adult' , 'middle-aged adult' , 'elderly'])

newData['Age Status']

#i chose to create the attribute called age status so that we can perform analysis on purchases based on the age state of a customer.
#with this, we will be able to better plan packages catered to certain age groups ad their needs and consumption behaviouor.

